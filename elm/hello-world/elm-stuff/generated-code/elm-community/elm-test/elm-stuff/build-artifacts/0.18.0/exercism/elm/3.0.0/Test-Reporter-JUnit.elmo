var _exercism$elm$Test_Reporter_JUnit$encodeTime = function (time) {
	return _elm_lang$core$Json_Encode$string(
		_elm_lang$core$Basics$toString(
			_elm_lang$core$Time$inSeconds(time)));
};
var _exercism$elm$Test_Reporter_JUnit$formatClassAndName = function (labels) {
	var _p0 = labels;
	if (_p0.ctor === '::') {
		return {
			ctor: '_Tuple2',
			_0: A2(
				_elm_lang$core$String$join,
				' ',
				_elm_lang$core$List$reverse(_p0._1)),
			_1: _p0._0
		};
	} else {
		return {ctor: '_Tuple2', _0: '', _1: ''};
	}
};
var _exercism$elm$Test_Reporter_JUnit$encodeFailureMessage = function (_p1) {
	var _p2 = _p1;
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'failure',
			_1: _elm_lang$core$Json_Encode$string(
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$Maybe$withDefault, '', _p2.given),
					_p2.message))
		},
		_1: {ctor: '[]'}
	};
};
var _exercism$elm$Test_Reporter_JUnit$encodeTestcaseFailure = function (expectation) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '[]'},
		A2(
			_elm_lang$core$Maybe$map,
			_exercism$elm$Test_Reporter_JUnit$encodeFailureMessage,
			_elm_community$elm_test$Test_Runner$getFailure(expectation)));
};
var _exercism$elm$Test_Reporter_JUnit$encodeTest = F2(
	function (_p3, expectation) {
		var _p4 = _p3;
		var _p5 = _exercism$elm$Test_Reporter_JUnit$formatClassAndName(_p4.labels);
		var classname = _p5._0;
		var name = _p5._1;
		return _elm_lang$core$Json_Encode$object(
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: '@classname',
						_1: _elm_lang$core$Json_Encode$string(classname)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: '@name',
							_1: _elm_lang$core$Json_Encode$string(name)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: '@time',
								_1: _exercism$elm$Test_Reporter_JUnit$encodeTime(_p4.duration)
							},
							_1: {ctor: '[]'}
						}
					}
				},
				_exercism$elm$Test_Reporter_JUnit$encodeTestcaseFailure(expectation)));
	});
var _exercism$elm$Test_Reporter_JUnit$encodeSuite = F2(
	function (extraFailure, result) {
		var baseExpectations = A2(
			_elm_lang$core$List$map,
			_exercism$elm$Test_Reporter_JUnit$encodeTest(result),
			result.expectations);
		var _p6 = extraFailure;
		if (_p6.ctor === 'Nothing') {
			return baseExpectations;
		} else {
			var expectation = _elm_community$elm_test$Expect$fail(_p6._0);
			return A2(
				_elm_lang$core$List$append,
				baseExpectations,
				_elm_lang$core$List$singleton(
					A2(
						_exercism$elm$Test_Reporter_JUnit$encodeTest,
						{
							labels: {ctor: '[]'},
							duration: 0,
							expectations: {
								ctor: '::',
								_0: expectation,
								_1: {ctor: '[]'}
							}
						},
						expectation)));
		}
	});
var _exercism$elm$Test_Reporter_JUnit$encodeSuites = F2(
	function (extraFailure, results) {
		return _elm_lang$core$Json_Encode$list(
			A2(
				_elm_lang$core$List$concatMap,
				_exercism$elm$Test_Reporter_JUnit$encodeSuite(extraFailure),
				results));
	});
var _exercism$elm$Test_Reporter_JUnit$reportSummary = F3(
	function (duration, autoFail, results) {
		var expectations = A2(
			_elm_lang$core$List$concatMap,
			function (_) {
				return _.expectations;
			},
			results);
		var failed = _elm_lang$core$List$length(
			A2(
				_elm_lang$core$List$filter,
				F2(
					function (x, y) {
						return !_elm_lang$core$Native_Utils.eq(x, y);
					})(_elm_community$elm_test$Expect$pass),
				expectations));
		var extraFailure = (_elm_lang$core$Native_Utils.eq(failed, 0) && (!_elm_lang$core$Native_Utils.eq(autoFail, _elm_lang$core$Maybe$Nothing))) ? autoFail : _elm_lang$core$Maybe$Nothing;
		var passed = _elm_lang$core$List$length(expectations) - failed;
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'testsuite',
					_1: _elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: '@name',
								_1: _elm_lang$core$Json_Encode$string('elm-test')
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: '@package',
									_1: _elm_lang$core$Json_Encode$string('elm-test')
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: '@tests',
										_1: _elm_lang$core$Json_Encode$int(
											_elm_lang$core$List$length(expectations))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: '@failed',
											_1: _elm_lang$core$Json_Encode$int(failed)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: '@errors',
												_1: _elm_lang$core$Json_Encode$int(0)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: '@time',
													_1: _exercism$elm$Test_Reporter_JUnit$encodeTime(
														A3(
															_elm_lang$core$List$foldl,
															F2(
																function (x, y) {
																	return x + y;
																}),
															0,
															A2(
																_elm_lang$core$List$map,
																function (_) {
																	return _.duration;
																},
																results)))
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'testcase',
														_1: A2(_exercism$elm$Test_Reporter_JUnit$encodeSuites, extraFailure, results)
													},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						})
				},
				_1: {ctor: '[]'}
			});
	});
var _exercism$elm$Test_Reporter_JUnit$reportComplete = function (_p7) {
	var _p8 = _p7;
	return _elm_lang$core$Maybe$Nothing;
};
var _exercism$elm$Test_Reporter_JUnit$reportBegin = function (_p9) {
	return _elm_lang$core$Maybe$Nothing;
};
