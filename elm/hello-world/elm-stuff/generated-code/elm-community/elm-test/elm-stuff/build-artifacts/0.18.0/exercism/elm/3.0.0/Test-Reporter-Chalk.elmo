var _exercism$elm$Test_Reporter_Chalk$stat = F2(
	function (label, value) {
		return {
			ctor: '::',
			_0: {
				styles: {
					ctor: '::',
					_0: 'dim',
					_1: {ctor: '[]'}
				},
				text: label
			},
			_1: {
				ctor: '::',
				_0: {
					styles: {ctor: '[]'},
					text: A2(_elm_lang$core$Basics_ops['++'], value, '\n')
				},
				_1: {ctor: '[]'}
			}
		};
	});
var _exercism$elm$Test_Reporter_Chalk$getTodosAndFailuresHelp = F2(
	function (outcome, testResults) {
		getTodosAndFailuresHelp:
		while (true) {
			var _p0 = testResults;
			if (_p0.ctor === '[]') {
				return outcome;
			} else {
				var _p1 = A2(_elm_lang$core$List$partition, _elm_community$elm_test$Test_Runner$isTodo, _p0._0.expectations);
				var todos = _p1._0;
				var nonTodos = _p1._1;
				var todoFailures = A2(_elm_lang$core$List$filterMap, _elm_community$elm_test$Test_Runner$getFailure, todos);
				var nonTodoFailures = A2(
					_elm_lang$core$List$any,
					F2(
						function (x, y) {
							return !_elm_lang$core$Native_Utils.eq(x, y);
						})(_elm_community$elm_test$Expect$pass),
					nonTodos) ? 1 : 0;
				var newOutcome = (_elm_lang$core$Native_Utils.eq(
					todoFailures,
					{ctor: '[]'}) && _elm_lang$core$Native_Utils.eq(nonTodoFailures, 0)) ? outcome : {
					todos: A2(
						_elm_lang$core$Basics_ops['++'],
						outcome.todos,
						A2(
							_elm_lang$core$List$map,
							function (failure) {
								return {ctor: '_Tuple2', _0: _p0._0.labels, _1: failure};
							},
							todoFailures)),
					nonTodoFailures: outcome.nonTodoFailures + nonTodoFailures
				};
				var _v1 = newOutcome,
					_v2 = _p0._1;
				outcome = _v1;
				testResults = _v2;
				continue getTodosAndFailuresHelp;
			}
		}
	});
var _exercism$elm$Test_Reporter_Chalk$getTodosAndFailures = _exercism$elm$Test_Reporter_Chalk$getTodosAndFailuresHelp(
	{
		todos: {ctor: '[]'},
		nonTodoFailures: 0
	});
var _exercism$elm$Test_Reporter_Chalk$getNonTodoFailure = function (expectation) {
	return _elm_community$elm_test$Test_Runner$isTodo(expectation) ? _elm_lang$core$Maybe$Nothing : _elm_community$elm_test$Test_Runner$getFailure(expectation);
};
var _exercism$elm$Test_Reporter_Chalk$chalkWith = function (chalks) {
	return _elm_lang$core$Json_Encode$list(
		A2(_elm_lang$core$List$map, _exercism$elm$Chalk$encode, chalks));
};
var _exercism$elm$Test_Reporter_Chalk$failureLabelsToChalk = A2(
	_elm_community$elm_test$Test_Runner$formatLabels,
	A2(
		_exercism$elm$Chalk$withColorChar,
		_elm_lang$core$Native_Utils.chr('↓'),
		'dim'),
	A2(
		_exercism$elm$Chalk$withColorChar,
		_elm_lang$core$Native_Utils.chr('✗'),
		'red'));
var _exercism$elm$Test_Reporter_Chalk$todoToChalk = function (_p2) {
	var _p3 = _p2;
	return {
		ctor: '::',
		_0: {
			styles: {ctor: '[]'},
			text: A2(
				_elm_lang$core$Basics_ops['++'],
				'◦ TODO: ',
				A2(_elm_lang$core$Basics_ops['++'], _p3.message, '\n\n'))
		},
		_1: {ctor: '[]'}
	};
};
var _exercism$elm$Test_Reporter_Chalk$todoLabelsToChalk = A2(
	_elm_community$elm_test$Test_Runner$formatLabels,
	A2(
		_exercism$elm$Chalk$withColorChar,
		_elm_lang$core$Native_Utils.chr('↓'),
		'dim'),
	A2(
		_exercism$elm$Chalk$withColorChar,
		_elm_lang$core$Native_Utils.chr('↓'),
		'dim'));
var _exercism$elm$Test_Reporter_Chalk$todosToChalk = function (_p4) {
	var _p5 = _p4;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_exercism$elm$Test_Reporter_Chalk$todoLabelsToChalk(_p5._0),
		_exercism$elm$Test_Reporter_Chalk$todoToChalk(_p5._1));
};
var _exercism$elm$Test_Reporter_Chalk$summarizeTodos = function (todos) {
	var _p6 = A2(_elm_lang$core$List$concatMap, _exercism$elm$Test_Reporter_Chalk$todosToChalk, todos);
	if (_p6.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		return {
			ctor: '::',
			_0: {
				styles: {ctor: '[]'},
				text: '\n\n'
			},
			_1: _p6
		};
	}
};
var _exercism$elm$Test_Reporter_Chalk$pluralize = F3(
	function (singular, plural, count) {
		var suffix = _elm_lang$core$Native_Utils.eq(count, 1) ? singular : plural;
		return A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(count),
				_1: {
					ctor: '::',
					_0: suffix,
					_1: {ctor: '[]'}
				}
			});
	});
var _exercism$elm$Test_Reporter_Chalk$reportBegin = function (_p7) {
	var _p8 = _p7;
	var prefix = A2(
		_elm_lang$core$Basics_ops['++'],
		'\nelm-test\n--------\n\nRunning ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			A3(_exercism$elm$Test_Reporter_Chalk$pluralize, 'test', 'tests', _p8.testCount),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'. To reproduce these results, run: elm-test --fuzz ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p8.fuzzRuns),
					A2(
						_elm_lang$core$Basics_ops['++'],
						' --seed ',
						_elm_lang$core$Basics$toString(_p8.initialSeed))))));
	return _elm_lang$core$Maybe$Just(
		_exercism$elm$Test_Reporter_Chalk$chalkWith(
			{
				ctor: '::',
				_0: {
					styles: {ctor: '[]'},
					text: A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$String$join,
							' ',
							{ctor: '::', _0: prefix, _1: _p8.paths}),
						'\n')
				},
				_1: {ctor: '[]'}
			}));
};
var _exercism$elm$Test_Reporter_Chalk$indent = function (str) {
	return A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				})('    '),
			A2(_elm_lang$core$String$split, '\n', str)));
};
var _exercism$elm$Test_Reporter_Chalk$failureToChalk = function (_p9) {
	var _p10 = _p9;
	var messageChalk = {
		styles: {ctor: '[]'},
		text: A2(
			_elm_lang$core$Basics_ops['++'],
			'\n',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_exercism$elm$Test_Reporter_Chalk$indent(_p10.message),
				'\n\n'))
	};
	var _p11 = _p10.given;
	if (_p11.ctor === 'Nothing') {
		return {
			ctor: '::',
			_0: messageChalk,
			_1: {ctor: '[]'}
		};
	} else {
		return {
			ctor: '::',
			_0: {
				styles: {
					ctor: '::',
					_0: 'dim',
					_1: {ctor: '[]'}
				},
				text: A2(
					_elm_lang$core$Basics_ops['++'],
					'\nGiven ',
					A2(_elm_lang$core$Basics_ops['++'], _p11._0, '\n'))
			},
			_1: {
				ctor: '::',
				_0: messageChalk,
				_1: {ctor: '[]'}
			}
		};
	}
};
var _exercism$elm$Test_Reporter_Chalk$failuresToChalk = F2(
	function (labels, failures) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_exercism$elm$Test_Reporter_Chalk$failureLabelsToChalk(labels),
			A2(_elm_lang$core$List$concatMap, _exercism$elm$Test_Reporter_Chalk$failureToChalk, failures));
	});
var _exercism$elm$Test_Reporter_Chalk$reportComplete = function (_p12) {
	var _p13 = _p12;
	var _p14 = A2(_elm_lang$core$List$filterMap, _exercism$elm$Test_Reporter_Chalk$getNonTodoFailure, _p13.expectations);
	if (_p14.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			_exercism$elm$Test_Reporter_Chalk$chalkWith(
				A2(_exercism$elm$Test_Reporter_Chalk$failuresToChalk, _p13.labels, _p14)));
	}
};
var _exercism$elm$Test_Reporter_Chalk$formatDuration = function (time) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(time),
		' ms');
};
var _exercism$elm$Test_Reporter_Chalk$reportSummary = F3(
	function (duration, autoFail, results) {
		var _p15 = _exercism$elm$Test_Reporter_Chalk$getTodosAndFailures(results);
		var todos = _p15.todos;
		var nonTodoFailures = _p15.nonTodoFailures;
		var passed = (_elm_lang$core$List$length(results) - nonTodoFailures) - _elm_lang$core$List$length(todos);
		var headlineResult = function () {
			var _p16 = {
				ctor: '_Tuple3',
				_0: autoFail,
				_1: nonTodoFailures,
				_2: _elm_lang$core$List$length(todos)
			};
			_v11_4:
			do {
				if (_p16._0.ctor === 'Nothing') {
					if (_p16._1 === 0) {
						switch (_p16._2) {
							case 0:
								return _elm_lang$core$Result$Ok('TEST RUN PASSED');
							case 1:
								return _elm_lang$core$Result$Err(
									{ctor: '_Tuple3', _0: 'yellow', _1: 'TEST RUN INCOMPLETE', _2: ' because there is 1 TODO remaining'});
							default:
								return _elm_lang$core$Result$Err(
									{
										ctor: '_Tuple3',
										_0: 'yellow',
										_1: 'TEST RUN INCOMPLETE',
										_2: A2(
											_elm_lang$core$Basics_ops['++'],
											' because there are ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p16._2),
												' TODOs remaining'))
									});
						}
					} else {
						break _v11_4;
					}
				} else {
					if (_p16._1 === 0) {
						return _elm_lang$core$Result$Err(
							{
								ctor: '_Tuple3',
								_0: 'yellow',
								_1: 'TEST RUN INCOMPLETE',
								_2: A2(_elm_lang$core$Basics_ops['++'], ' because ', _p16._0._0)
							});
					} else {
						break _v11_4;
					}
				}
			} while(false);
			return _elm_lang$core$Result$Err(
				{ctor: '_Tuple3', _0: 'red', _1: 'TEST RUN FAILED', _2: ''});
		}();
		var headline = function () {
			var _p17 = headlineResult;
			if (_p17.ctor === 'Ok') {
				return {
					ctor: '::',
					_0: {
						styles: {
							ctor: '::',
							_0: 'underline',
							_1: {
								ctor: '::',
								_0: 'green',
								_1: {ctor: '[]'}
							}
						},
						text: A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(_elm_lang$core$Basics_ops['++'], _p17._0, '\n\n'))
					},
					_1: {ctor: '[]'}
				};
			} else {
				var _p18 = _p17._0._0;
				return {
					ctor: '::',
					_0: {
						styles: {
							ctor: '::',
							_0: 'underline',
							_1: {
								ctor: '::',
								_0: _p18,
								_1: {ctor: '[]'}
							}
						},
						text: A2(_elm_lang$core$Basics_ops['++'], '\n', _p17._0._1)
					},
					_1: {
						ctor: '::',
						_0: {
							styles: {
								ctor: '::',
								_0: _p18,
								_1: {ctor: '[]'}
							},
							text: A2(_elm_lang$core$Basics_ops['++'], _p17._0._2, '\n\n')
						},
						_1: {ctor: '[]'}
					}
				};
			}
		}();
		var todoStats = function () {
			var _p19 = _elm_lang$core$List$length(todos);
			if (_p19 === 0) {
				return {ctor: '[]'};
			} else {
				return A2(
					_exercism$elm$Test_Reporter_Chalk$stat,
					'Todo:     ',
					_elm_lang$core$Basics$toString(_p19));
			}
		}();
		var individualTodos = (_elm_lang$core$Native_Utils.cmp(nonTodoFailures, 0) > 0) ? {ctor: '[]'} : _exercism$elm$Test_Reporter_Chalk$summarizeTodos(
			_elm_lang$core$List$reverse(todos));
		return _elm_lang$core$Json_Encode$list(
			A2(
				_elm_lang$core$List$map,
				_exercism$elm$Chalk$encode,
				_elm_lang$core$List$concat(
					{
						ctor: '::',
						_0: headline,
						_1: {
							ctor: '::',
							_0: A2(
								_exercism$elm$Test_Reporter_Chalk$stat,
								'Duration: ',
								_exercism$elm$Test_Reporter_Chalk$formatDuration(duration)),
							_1: {
								ctor: '::',
								_0: A2(
									_exercism$elm$Test_Reporter_Chalk$stat,
									'Passed:   ',
									_elm_lang$core$Basics$toString(passed)),
								_1: {
									ctor: '::',
									_0: A2(
										_exercism$elm$Test_Reporter_Chalk$stat,
										'Failed:   ',
										_elm_lang$core$Basics$toString(nonTodoFailures)),
									_1: {
										ctor: '::',
										_0: todoStats,
										_1: {
											ctor: '::',
											_0: individualTodos,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					})));
	});
